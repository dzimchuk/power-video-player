Assembly signing:

Each project includes its own public key named public.snk and is configured for delayed signing using this key.
Also each project has post-build actions to re-sign build assemblies with their private keys.

Private keys are NOT included in the solution and are kept by Andrei Dzimchuk (that's the point of 'private' keys).

This poses a few implications when you build the source code. Let's consider typical situations.


1. Regular development.
You may want to completely remove assembly signing. After all, these are just your local builds, why bother?

However, suppose you updated a component and want to test it against the official build. In this case you can build the component delayed signed using the provided public.snk. Just make sure you disable the CLR checks with (sn -Vr), you can use disable_verification.bat provided in the solution (perhaps some customization will be needed).

When you're done, re-enable the CLR verification (sn -Vu) and submit your code changes for official build.

In all cases you will have to edit projects’ configuration to either remove the custom post-build actions only or remove the post-build actions together with delay signing. You can’t submit your changed project configuration files to the trunk but you can check them in to your own development branch.


2. Development with strongly typed assemblies.
You may want to use your own public and private keypairs. You are free to set up the projects the way like. The good thing is you don’t even have to change the projects’ configuration. Instead, you can replace public.snk with your own public keys and put your own private keys under $(SolutionDir)keypairs. 

Of course, make sure not to check in your keys.

Builds produced this way will be your builds, not the official builds. But still that’s an option if you choose to re-use some PVP component in another project.

